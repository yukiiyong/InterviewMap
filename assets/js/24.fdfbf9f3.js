(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{378:function(t,e,a){"use strict";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h4",{attrs:{id:"描述vue从初始化页面－修改数据－刷新页面的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述vue从初始化页面－修改数据－刷新页面的过程"}},[t._v("#")]),t._v(" 描述Vue从初始化页面－修改数据－刷新页面的过程")]),t._v(" "),a("p",[t._v("当Vue进入初始化阶段，一方面Vue会遍历data里的属性，并用Object.defineProperty将其转化为setter和getter，实现数据劫持。另一方面Vue的编译器会对元素节点的各个指令进行解析，初始化视图。并订阅watcher来更新视图，此时将watcher添加到消息订阅器dep中。此时初始化完毕。"),a("br"),t._v("\nnew 一个自己的Watcher对象，然后Watcher会立即调用组件的render函数去生成虚拟DOM，此时会触发getter函数，将当前的Watcher函数注册进sub里。\n另一方面，当data里的数据发生变化时，会触发Observer中的setter方法，此时会调用Dep.notify方法。Dep会遍历所有的订阅者watcher，并调用其update方法。Vue内部再通过diff算法，patch相应的更新来完成对订阅者视图的改变。")]),t._v(" "),a("h4",{attrs:{id:"vue实现双向绑定原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue实现双向绑定原理"}},[t._v("#")]),t._v(" Vue实现双向绑定原理")]),t._v(" "),a("ol",[a("li",[t._v("实现一个监听器Observer。对数据对象进行遍历，包括子属性对象的属性。通过Object.defineProperty将其转换为getter和setter。这样的话，对这个对象的某个属性进行赋值，就会触发setter就能监听到数据的变化。")]),t._v(" "),a("li",[t._v("实现一个编译器compiler。解析模板指令，将模板中的变量替换成数据，然后初始化渲染视图。然后对指令对应的节点绑定更新函数，添加监听数据的订阅者。一旦数据有变动，收到通知，调用更新函数来进行更新。")]),t._v(" "),a("li",[t._v("实现一个订阅者Watcher。 Watcher是Observer和Compiler中的桥梁。主要任务是当Observer中属性发生变化时，当收到属性变化的消息时，触发Watcher中的更新函数来进行更新。")]),t._v(" "),a("li",[t._v("实现一个订阅器Dep。采用发布－订阅模式，用来收集订阅者Watcher。对监听器Observer和Watcher进行统一管理。")])]),t._v(" "),a("h4",{attrs:{id:"vue实现单向数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue实现单向数据流"}},[t._v("#")]),t._v(" Vue实现单向数据流")]),t._v(" "),a("p",[t._v("所有的prop都使得其父子prop之间形成一个单向的下行绑定。父级prop的更新会向下流动到子组件，但是反过来不行。这是为了防止子组件意外改变父组件的状态，从而使应用数据流难以理解。"),a("br"),t._v("\n额外的，每次父组件更新时，子组件的prop都会刷新成最新的值。这意味着我们不应该在子组件中修改prop。如果你这么做了，Vue会在浏览器控制台发出一个警告。子组件想修改prop，只能通过＄emit向父组件派发一个事件。父组件收到后，由父组件修改。")]),t._v(" "),a("h4",{attrs:{id:"两种试图修改prop值情形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两种试图修改prop值情形"}},[t._v("#")]),t._v(" 两种试图修改prop值情形")]),t._v(" "),a("ol",[a("li",[t._v("这个prop用来传递一个初始值，子组件希望将其作为一个本地prop数据进行使用（定义一个本地的data属性并将此prop用作其原始值")]),t._v(" "),a("li",[t._v("这个prop以一个原始值传入并需要转换（使用这个prop值来作为计算属性的依赖）")])]),t._v(" "),a("h4",{attrs:{id:"vue中key值作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue中key值作用"}},[t._v("#")]),t._v(" Vue中key值作用")]),t._v(" "),a("p",[t._v("vue中key值作为vnode的唯一标记。通过这个标记，我们在进行diff操作时可以更准确、更快速。"),a("br"),t._v("\n使用for来更新已经渲染的列表时，如果没有key值，就会采用就地复用策略。即当列表数据修改时，会根据key值来判断列表中某个元素是否修改。如果有，则重新渲染这一项。否则服用之前的DOM，仅修改value值。")]),t._v(" "),a("h4",{attrs:{id:"响应式原理-react-与-vue差别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理-react-与-vue差别"}},[t._v("#")]),t._v(" 响应式原理 REACT 与 Vue差别")]),t._v(" "),a("p",[t._v("响应式原理意味着在数据改变时，视图也随之更新，意味着我们在开发过程中只需要进行数据的管理。"),a("br"),t._v("\nReact也有这种特性，React通过this.setState来改变数据，然后通过新数据生成新的虚拟DOM，最后通过新旧虚拟DOM对比找出需要更新的节点，也就是说，React通过虚拟DOM和DOM diff算法做到响应式。"),a("br"),t._v("\n而Vue则是利用Object.defineProperty方法里的setter和getter方法的观察者模式来实现。")]),t._v(" "),a("h4",{attrs:{id:"vue-set原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-set原理"}},[t._v("#")]),t._v(" Vue.$set原理")]),t._v(" "),a("ol",[a("li",[t._v("挂在prototype上（初始化时）")]),t._v(" "),a("li",[t._v("若target为数组，使用splice来进行强制更新")]),t._v(" "),a("li",[t._v("若target为普通对象，直接赋值")]),t._v(" "),a("li",[t._v("若target 为Vue实例或根数据列表，报错")]),t._v(" "),a("li",[t._v("若target为响应式对象，赋值后手动Observe")])]),t._v(" "),a("h4",{attrs:{id:"使用vuex-只需要执行vue-use-vuex-，并在vue的配置中传入一个store对象的实例，store如何实现注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用vuex-只需要执行vue-use-vuex-，并在vue的配置中传入一个store对象的实例，store如何实现注入"}},[t._v("#")]),t._v(" 使用Vuex 只需要执行Vue.use(vuex)，并在Vue的配置中传入一个store对象的实例，store如何实现注入")]),t._v(" "),a("p",[a("code",[t._v("Vue.use(vuex)")]),t._v("方法执行的是install，它实现了Vue实例对象的init方法的封装与注入，使传入的store对象，被设置到Vue上下文环境的$store中，因此Vue Component在任意地方都能通过$store访问到store")]),t._v(" "),a("blockquote",[a("p",[t._v("Vue.js Vue实现响应式并不是在数据变化后进行DOM更新，而是按一定策略进行更新")])]),t._v(" "),a("p",[a("strong",[t._v("$nextTick")]),t._v(" 是下次DOM更新循环结束之后执行延迟回调，在数据修改之后执行$nextTick，则可以在回调函数中获取更新后的DOM")]),t._v(" "),a("p",[a("strong",[t._v("计算属性computed")]),t._v(" 相关依赖发生变化时才调用，依赖于return的数据。计算属性是基于他们的依赖进行缓存的，默认只有getter，也可以有setter")]),t._v(" "),a("p",[a("strong",[t._v("watch（侦听器）")]),t._v(" 名字变化（数据）即调用，用于数据变化时执行异步或开销较大的操作"),a("br"),t._v(" "),a("strong",[t._v("赋值")]),t._v("不可以在Vue实例中直接定义属性，需在data中初始化属性或调用vm.$set定义")]),t._v(" "),a("h4",{attrs:{id:"插值语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插值语法"}},[t._v("#")]),t._v(" 插值语法")]),t._v(" "),a("ol",[a("li",[t._v("文本插值：数据绑定用"+t._s(t.表达式))]),t._v(" "),a("li",[t._v("html插值 使用v-html指令输出html代码")]),t._v(" "),a("li",[t._v("属性绑定 使用v-bind指令，如"),a("code",[t._v("v-bind:class=”{‘className’=Boolean}”")])])]),t._v(" "),a("p",[a("strong",[t._v("指令")]),t._v(" 带有v-前缀的特殊属性，如"),a("code",[t._v("v-if")]),t._v("，"),a("code",[t._v("v-bind")]),a("br"),t._v(" "),a("strong",[t._v("参数")]),t._v(" 在指令后用冒号：指明，如 "),a("code",[t._v("v-bind:src=http://baidu.com")]),t._v(" "),a("strong",[t._v("表达式")]),t._v(" Vue支持JavaScript表达式，但只能包含单个表达式")]),t._v(" "),a("h4",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),a("ol",[a("li",[t._v("以半角句号.指明的特殊后缀，用于指出一个指令应该以特殊方式绑定 "),a("code",[t._v("v-on:click= func")]),t._v("（事件绑定）")]),t._v(" "),a("li",[t._v("事件修饰符有.stop .prevent .capture(事件捕获模式) .self(自身触发) .once .passive(默认行为立即触发)")]),t._v(" "),a("li",[t._v("事件修饰符可以链式调用，但需要注意顺序，如"),a("code",[t._v("@click.prevent.self")]),t._v("（阻止所有点击），"),a("code",[t._v("@click.self.prevent")]),t._v("(阻止自身点击)")]),t._v(" "),a("li",[t._v("按键修饰符 通过调用按键keycode来进行修饰，同时vue提供了13种常用按键的别名，如enter,tab,left,right,up,down,shift,ctrl,delete,esc,space,alt,meta(.exact 精确控制按键)，如"),a("code",[t._v("@keyup.enter=”submit”")])])]),t._v(" "),a("p",[a("strong",[t._v("过滤器")]),t._v(" 过滤器采用管道符号|，过滤器本质是一个函数，如")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("”idData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" filter”"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n")])])]),a("p",[a("strong",[t._v("缩写")]),t._v(" "),a("code",[t._v("v-bind:src")]),t._v(" 可以缩写成 "),a("code",[t._v(":src")]),t._v("，"),a("code",[t._v("v-on:click")]),t._v(" 可以缩写成 "),a("code",[t._v("@click")]),t._v(" "),a("strong",[t._v("构造器")]),t._v(" 每个vue应用都是通过构造函数"),a("code",[t._v("Vue()")]),t._v(" 来创建一个vue的根实例来启动的"),a("br"),t._v(" "),a("strong",[t._v("属性与方法")]),t._v(" 每个vue实例都会代理data对象里所有的属性（双向数据绑定），同时也拥有实例的属性和方法，这些实例的属性，方法用$与data对象的属性和方法区分")]),t._v(" "),a("h4",{attrs:{id:"条件渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[t._v("#")]),t._v(" 条件渲染")]),t._v(" "),a("ol",[a("li",[t._v("v-for优先级大于v-if（v-if可在外层调用）")]),t._v(" "),a("li",[t._v("v-for可用于渲染一个数组，"),a("code",[t._v("v-for=”item in items”")]),t._v("也可用于一个对象的属性，使用key标唯一")])]),t._v(" "),a("p",[a("strong",[t._v("就地复用")]),t._v(" Vue在数据项的顺序改变时将不会移动DOM元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素"),a("br"),t._v(" "),a("strong",[t._v("观察数组变异方法（改变数组）")]),t._v("：push,pop,shift,unshift,sort,reverse,splice（触发视图更新）"),a("br"),t._v(" "),a("strong",[t._v("非变异方法")]),t._v("：filter，concat，slice")]),t._v(" "),a("h4",{attrs:{id:"html监听事件-使用v-on好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html监听事件-使用v-on好处"}},[t._v("#")]),t._v(" HTML监听事件(使用v-on好处)")]),t._v(" "),a("ol",[a("li",[t._v("HTML可以精确定位JavaScript对应方法")]),t._v(" "),a("li",[t._v("viewmodel代码是纯粹的逻辑和DOM解耦，易于测试")]),t._v(" "),a("li",[t._v("viewmodel被销毁时，事件处理器自动删除")]),t._v(" "),a("li",[t._v("v-model 在表单元素上创建双向数据绑定，它会根据控件类型自动选择正确的方法来更新元素。v-model实质上是负责监听用户输入以更新数据")])]),t._v(" "),a("p",[a("strong",[t._v("文本")]),t._v(" "),a("code",[t._v('<input v-model="shuru">')]),t._v(" //shuru值改变影响别处调用"),a("br"),t._v(" "),a("strong",[t._v("多行文本")]),t._v(" 多行文本在文本区域插值并不会生效，应用"),a("code",[t._v("v-model")]),t._v("代替")]),t._v(" "),a("h4",{attrs:{id:"复选框-单个勾选框，逻辑值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复选框-单个勾选框，逻辑值"}},[t._v("#")]),t._v(" 复选框 单个勾选框，逻辑值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checkbox"')]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checkbox"')]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checked"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("label "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checkbox"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" checked "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("label"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//选中哪些就显示哪些")]),t._v("\n")])])]),a("p",[a("strong",[t._v("单选按钮和选择列表")]),t._v(" v-model和value绑定，"),a("code",[t._v("v-model")]),t._v("指定变量名称，选中哪一个变量值就为哪一个"),a("br"),t._v(" "),a("strong",[t._v("值绑定")]),t._v(" 对于单选按钮，勾选框和选择列表，"),a("code",[t._v("v-model")]),t._v("绑定的value通常为静态字符串，若想绑定value到Vue实例的动态属性上，可以使用"),a("code",[t._v("v-bind")]),t._v("\n复选框:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"checkbox"')]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"toggle"')]),t._v("  v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toggle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当选中时")]),t._v("\n    vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toggle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当没有选中时")]),t._v("\n")])])]),a("p",[t._v("单选按钮:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"radio"')]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pick"')]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pick "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当选中时")]),t._v("\n")])])]),a("p",[t._v("选择列表的选项:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("select v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"selected"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" 内联对象字面量 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("option v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{ number: 123 }"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("option"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("select"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当选中时")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selected "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 'object'")]),t._v("\n    vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("selected"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("number "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 123")]),t._v("\n")])])]),a("h4",{attrs:{id:"v-model修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-model修饰符"}},[t._v("#")]),t._v(" v-model修饰符")]),t._v(" "),a("ol",[a("li",[t._v(".lazy 在change而不是input事件更新")]),t._v(" "),a("li",[t._v(".number 将用户输入的值变为Number类型")]),t._v(" "),a("li",[t._v(".trim 用户输入的值过滤首尾空格")])]),t._v(" "),a("h4",{attrs:{id:"组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),a("ul",[a("li",[t._v("组件是Vue.js最强大的功能之一。组件可以拓展HTML元素，封装可重用代码。在较高层次上，组件是自定义元素，Vue.js编译器为组件提供特殊功能")])]),t._v(" "),a("h4",{attrs:{id:"全局注册组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局注册组件"}},[t._v("#")]),t._v(" 全局注册组件")]),t._v(" "),a("p",[a("code",[t._v("Vue.component(‘my-component’, {//选项})")])]),t._v(" "),a("ul",[a("li",[t._v("注册之后可以作为自定义元素"),a("code",[t._v("<my-component>")]),t._v("在任何新创建的Vue根实例中模板中使用，注意必须确保在初始化根实例之前注册组件")]),t._v(" "),a("li",[a("strong",[t._v("全局注册缺点")]),t._v(" 不再使用组件，但组件仍包含在构建结果中，JS文件增加")]),t._v(" "),a("li",[a("strong",[t._v("局部注册组件")]),t._v("  通过Vue实例的实例选项components注册仅在其作用域中可用的组件"),a("br"),t._v(" "),a("code",[t._v("components：{‘cname’， cname}")])]),t._v(" "),a("li",[t._v("局部注册缺点 局部注册的组件在其子组件及外部不可以")])]),t._v(" "),a("h4",{attrs:{id:"dom模板解析注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom模板解析注意事项"}},[t._v("#")]),t._v(" DOM模板解析注意事项")]),t._v(" "),a("ul",[a("li",[t._v("当把DOM作为模板时，会受到HTML本身的一些限制，因为Vue只有在浏览器解析、规范化模板之后才能获取其内容。")]),t._v(" "),a("li",[t._v("像ul，ol，table，select这样的元素里包含的元素有限制，在自定义组件中使用这些受限制的元素会导致一些问题，会把自定义组件当成无效内容")]),t._v(" "),a("li",[t._v("若使用字符串模板则无以上问题，如")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("”text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("template”"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" JavaScript内联字符串模板 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vue组件  \n")])])]),a("p",[a("strong",[t._v("data必须是函数原因")]),t._v(" data不是函数，Vue会停止运行，并在控制台发出警告，告诉你组件实例中data必须是一个函数")]),t._v(" "),a("h4",{attrs:{id:"prop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prop"}},[t._v("#")]),t._v(" prop")]),t._v(" "),a("ul",[a("li",[t._v("组件实例的作用域是孤立的，意味着不能再子组件模板内直接引用父组件的数据")]),t._v(" "),a("li",[t._v("prop特性在HTML上使用短横线，在JS上使用驼峰"),a("br"),t._v(" "),a("strong",[t._v("静态prop")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("blog title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("”a”"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("blog"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("静态prop传递字符串"),a("br"),t._v(" "),a("strong",[t._v("动态prop")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("blog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("”a”"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("blog"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("动态prop可以传递非字符串")]),t._v(" "),a("h4",{attrs:{id:"单向数据流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单向数据流"}},[t._v("#")]),t._v(" 单向数据流")]),t._v(" "),a("blockquote",[a("p",[t._v("父组件的prop更新会传递到子组件，父组件刷新时，子组件的所有prop将刷新成最新的值")])]),t._v(" "),a("ol",[a("li",[t._v("试图改变子prop")]),t._v(" "),a("li",[t._v("prop用来传递初始值，定义一个本地data属性将prop用作初始值")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("定义一个计算属性，处理prop值并返回"),a("br"),t._v(" "),a("strong",[t._v("prop验证")]),t._v("  可以为组件的prop定义验证规则，传入的数据不符合要求，Vue会发出警告。要指定验证规则，需要"),a("strong",[t._v("用对象的形式定义prop")]),t._v("，不能用字符串数组")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("type")]),t._v("：原生构造函数之一 Function,String,Number,Boolean,Array,Object,Symbol")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("default")]),t._v(" 默认值")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("required")]),t._v(" true/false")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("validator")]),t._v(" function")])])]),t._v(" "),a("h4",{attrs:{id:"自定义事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义事件"}},[t._v("#")]),t._v(" 自定义事件")]),t._v(" "),a("ol",[a("li",[t._v("自定义事件名使用kebab-case")]),t._v(" "),a("li",[t._v("一个组件上的v-model会默认利用名为value的prop和名为input的事件，可以在组件定义时利用model选项指定")]),t._v(" "),a("li",[t._v("在根元素监听子元素的元素事件"),a("code",[t._v("v-on:focus.native=”focusEv”")])]),t._v(" "),a("li",[t._v("$listeners 包含作用在此组件的所有监听器。可以在子元素使用"),a("code",[t._v("v-on=”$listeners”")])]),t._v(" "),a("li",[t._v("子prop向父组件更新（.sync） 拓展为一个自动更新父组件属性的v-on监听器")])]),t._v(" "),a("h4",{attrs:{id:"插槽（slot）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插槽（slot）"}},[t._v("#")]),t._v(" 插槽（slot）")]),t._v(" "),a("blockquote",[a("p",[t._v("分发内容，混合父组件内容与子组件自己的模板")])]),t._v(" "),a("ol",[a("li",[t._v("单个插槽（默认） 组件定义时无"),a("code",[t._v("<slot>")]),t._v("，传入组件的数据（使用时）会被抛弃，默认")]),t._v(" "),a("li",[t._v("具名插槽 定义"),a("code",[t._v("<slot name=”header”></slot>")])]),t._v(" "),a("li",[t._v("使用（父组件使用slot）"),a("code",[t._v("<template slot=”header”></template>")])]),t._v(" "),a("li",[t._v("插槽默认内容 定义在slot里面的内容 "),a("code",[t._v("<slot>默认内容</slot>")])])]),t._v(" "),a("h4",{attrs:{id:"编译作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译作用域"}},[t._v("#")]),t._v(" 编译作用域")]),t._v(" "),a("ol",[a("li",[t._v("父模板所有东西都在父级作用域编译")]),t._v(" "),a("li",[t._v("子组件模板所有东西都在子组件作用域编译")])]),t._v(" "),a("h4",{attrs:{id:"watch-computed-filters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch-computed-filters"}},[t._v("#")]),t._v(" watch/computed/filters")]),t._v(" "),a("ul",[a("li",[t._v("watch监控已有属性，一旦属性发生改变就回去调用对应的方法")]),t._v(" "),a("li",[t._v("computed监控已有属性，一旦属性的依赖发生改变就会调用对应的方法，返回一个新的属性（响应式）")]),t._v(" "),a("li",[t._v("filters为我们提供一个方法，用来帮我们对数据进行筛选")])]),t._v(" "),a("h4",{attrs:{id:"computed与filters区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed与filters区别"}},[t._v("#")]),t._v(" computed与filters区别")]),t._v(" "),a("ol",[a("li",[t._v("触发时机"),a("br"),t._v("\ncomputed属性的更新依赖于Vue的数据更新通知机制，在属性所依赖的其他数据项发生改变时才会重新出发计算。优点是计算频率比较低，缺点是难以抽取独立逻辑，依赖于组件，复用性比较低"),a("br"),t._v("\nfilters只在显式调用时触发，常用于模板渲染上，优点是易于在组件外抽象，缺点是每次模板重新渲染都要计算一次")]),t._v(" "),a("li",[t._v("应用范围不一样"),a("br"),t._v("\ncomputed可以应用于其他computed，生命周期函数，methods，模板"),a("br"),t._v("\nfilter一般用于模板渲染，若要在其他位置使用，则需使用this._f函数"),a("br"),t._v("\nfilters支持链式调用")]),t._v(" "),a("li",[t._v("定义方式\ncomputed 只能在组件内部或者是mixin对象中定义"),a("br"),t._v("\nfilters 只能通过组件内部的filters属性定义，或者在组件外部通过Vue.filter函数定义")]),t._v(" "),a("li",[t._v("应用场景"),a("br"),t._v("\nfiter无法缓存，调用频率高，适用于格式化输出场景"),a("br"),t._v("\ncomputed具有缓存能力，在组件内普适性较高，适用于复杂数据转换、统计等功能、")])]),t._v(" "),a("h4",{attrs:{id:"作用域插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域插槽"}},[t._v("#")]),t._v(" 作用域插槽")]),t._v(" "),a("ol",[a("li",[t._v("是一种特殊类型的插槽，用作一个（能被传递数据的）可重用模板，来代替已渲染的组件")]),t._v(" "),a("li",[t._v("在子组件，只需将数据传递到插槽，就像prop传递到组件一样")])]),t._v(" "),a("blockquote",[a("p",[t._v("若一个JS表达式在一个函数定义的参数位置有效，那么此表达式实际上可以被slot-scope接受")])]),t._v(" "),a("p",[a("strong",[t._v("动态组件")]),t._v(" 通过保留的component元素，动态的绑定到它的is特性，我们可以让多个组件使用同一个挂载点，并动态切换")]),t._v(" "),a("ol",[a("li",[t._v("keep-alive 将切换出去的组件缓存起来，避免重新渲染")]),t._v(" "),a("li",[t._v("vue2.1.0后，keep-alive加入include（包含的组件缓存），exclude（排除的组件缓存，优先级大于include）")]),t._v(" "),a("li",[t._v("keep-alive中可以是字符串（不需要v-bind），数组，正则表达式（需v-bind），分隔用逗号")])]),t._v(" "),a("h4",{attrs:{id:"边界情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#边界情况"}},[t._v("#")]),t._v(" 边界情况")]),t._v(" "),a("ol",[a("li",[t._v("访问根实例（new Vue 实例 的子组件）"),a("code",[t._v("$root")])]),t._v(" "),a("li",[t._v("从子组件访问父组件 "),a("code",[t._v("$parent")])]),t._v(" "),a("li",[t._v("访问子组件实例或子元素"),a("code",[t._v("ref / $refs")])])]),t._v(" "),a("h4",{attrs:{id:"程序化事件监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序化事件监听"}},[t._v("#")]),t._v(" 程序化事件监听")]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("$on(eventName, eventHandler)")]),a("br"),t._v("\n2."),a("code",[t._v("$once(eventName, eventHandler)")]),a("br"),t._v("\n3."),a("code",[t._v("$off(eventName, eventHandler)")])]),t._v(" "),a("p",[a("strong",[t._v("递归调用")]),t._v(" 条件性调用，组件必须有name选项\n循环引用"),a("br"),t._v("\nVue.component注册"),a("br"),t._v("\n本地注册组件时，webpack异步import"),a("br"),t._v("\nv-once 根元素上添加以确保内容只计算一次后缓存（低开销的静态组件使用）"),a("br"),t._v("\n$forceUpdate 强制更新")]),t._v(" "),a("h4",{attrs:{id:"vue组件间传递数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件间传递数据"}},[t._v("#")]),t._v(" Vue组件间传递数据")]),t._v(" "),a("p",[t._v("1.父子组件 父组件通过prop传递数据到子组件，子组件通过显式派发update事件传递数据到父组件（.sync）")]),t._v(" "),a("ul",[a("li",[t._v("父组件通过v-on监听子组件数据更新事件的派发，子组件主动派发数据更新事件（emit）")]),t._v(" "),a("li",[t._v("v-model")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("非父子组件 EventHub（桥）、provide/inject 、vuex")])]),t._v(" "),a("h4",{attrs:{id:"过渡效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过渡效果"}},[t._v("#")]),t._v(" 过渡效果")]),t._v(" "),a("blockquote",[a("p",[t._v("Vue在插入（enter）和移除（leave）DOM时应用")])]),t._v(" "),a("ul",[a("li",[t._v("包括以下工具：")])]),t._v(" "),a("ol",[a("li",[t._v("在 CSS 过渡和动画中自动应用 class")]),t._v(" "),a("li",[t._v("可以配合使用第三方 CSS 动画库，如 Animate.css")]),t._v(" "),a("li",[t._v("在过渡钩子函数中使用 JavaScript 直接操作 DOM")]),t._v(" "),a("li",[t._v("可以配合使用第三方 JavaScript 动画库，如 Velocity.js")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("单元素/组件的过渡：")]),a("br"),t._v("\nVue 提供了 transition 的封装组件，在"),a("strong",[t._v("下列情形")]),t._v("中，可以给任何元素和组件添加 entering/leaving 过渡")]),t._v(" "),a("li",[t._v("条件渲染 (使用 v-if)")]),t._v(" "),a("li",[t._v("条件展示 (使用 v-show)")]),t._v(" "),a("li",[t._v("动态组件 "),a("code",[t._v('<component is="">')])]),t._v(" "),a("li",[t._v("组件根节点")])]),t._v(" "),a("p",[t._v("当插入或删除包含在 transition 组件中的元素时，Vue 将会做以下处理：")]),t._v(" "),a("ul",[a("li",[t._v("自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。")]),t._v(" "),a("li",[t._v("如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用。")]),t._v(" "),a("li",[t._v("如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。")]),t._v(" "),a("li",[a("strong",[t._v("过渡的类名：")]),t._v(" "),a("blockquote",[a("p",[t._v("在进入/离开的过渡中，会有 6 个 class 切换。")])]),t._v(" "),a("ol",[a("li",[t._v("v-enter：定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。")]),t._v(" "),a("li",[t._v("v-enter-active：定义过渡的状态。在元素整个过渡过程中作用，在元素被插入时生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。")]),t._v(" "),a("li",[t._v("v-enter-to: 2.1.8版及以上 定义进入过渡的结束状态。在元素被插入一帧后生效 (于此同时 v-enter 被删除)，在 transition/animation 完成之后移除。")]),t._v(" "),a("li",[t._v("v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。")]),t._v(" "),a("li",[t._v("v-leave-active：定义过渡的状态。在元素整个过渡过程中作用，在离开过渡被触发后立即生效，在 transition/animation 完成之后移除。这个类可以被用来定义过渡的过程时间，延迟和曲线函数。")]),t._v(" "),a("li",[t._v("v-leave-to: 2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发一帧后生效 (于此同时 v-leave 被删除)，在 transition/animation 完成之后移除。")])])])]),t._v(" "),a("h6",{attrs:{id:"自己实践之后的感悟："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自己实践之后的感悟："}},[t._v("#")]),t._v(" 自己实践之后的感悟：")]),t._v(" "),a("ul",[a("li",[t._v("在定义离开过渡的时候，最后就只定义class-leave-active的类，class-leave效果不明显。")]),t._v(" "),a("li",[t._v("CSS的过渡，就用transition：属性 过渡时间 速度 整个动画时间")]),t._v(" "),a("li",[t._v("动画的过渡，就用animation：动画名 过渡时间")])]),t._v(" "),a("h4",{attrs:{id:"css-动画："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-动画："}},[t._v("#")]),t._v(" CSS 动画：")]),t._v(" "),a("p",[t._v("CSS 动画用法同 CSS 过渡，区别是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend 事件触发时删除。")]),t._v(" "),a("h4",{attrs:{id:"自定义过渡的类名："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义过渡的类名："}},[t._v("#")]),t._v(" 自定义过渡的类名：")]),t._v(" "),a("blockquote",[a("p",[t._v("我们可以通过以下特性来自定义过渡类名：")])]),t._v(" "),a("p",[t._v("enter-class"),a("br"),t._v("\nenter-active-class"),a("br"),t._v("\nenter-to-class (2.1.8+)"),a("br"),t._v("\nleave-class"),a("br"),t._v("\nleave-active-class"),a("br"),t._v("\nleave-to-class (2.1.8+)"),a("br"),t._v("\n他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 Animate.css 结合使用十分有用。")]),t._v(" "),a("h4",{attrs:{id:"同时使用过渡和动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同时使用过渡和动画"}},[t._v("#")]),t._v(" 同时使用过渡和动画:")]),t._v(" "),a("p",[t._v("Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 transitionend 或 animationend ，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。"),a("br"),t._v("\n你需要给同一个元素同时设置两种过渡动效，比如 animation 很快的被触发并完成了，而 transition 效果还没结束。在这种情况中，你就需要使用 type 特性并设置 animation 或 transition 来明确声明你需要 Vue 监听的类型。")]),t._v(" "),a("h4",{attrs:{id:"显性的过渡持续时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显性的过渡持续时间"}},[t._v("#")]),t._v(" 显性的过渡持续时间")]),t._v(" "),a("blockquote",[a("p",[t._v("在很多情况下，Vue 可以自动得出过渡效果的完成时机。默认情况下，Vue 会等待其在过渡效果的根元素的第一个 transitionend 或 animationend 事件。")])]),t._v(" "),a("p",[t._v("在这种情况下你可以用 "),a("code",[t._v("<transition>")]),t._v(" 组件上的 duration 属性"),a("strong",[t._v("定制")]),t._v("一个"),a("strong",[t._v("显性的过渡持续时间 (以毫秒计)")]),t._v("：\n"),a("code",[t._v('<transition :duration="1000">...</transition>')]),t._v("\n你也可以"),a("strong",[t._v("定制进入和移出的持续时间")]),t._v("："),a("br"),t._v(" "),a("code",[t._v('<transition :duration="{ enter: 500, leave: 800 }">...</transition>')])]),t._v(" "),a("h4",{attrs:{id:"javascript-钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-钩子"}},[t._v("#")]),t._v(" JavaScript 钩子")]),t._v(" "),a("blockquote",[a("p",[t._v("是一种事件劫持机制，也就是说它会比你的事件更早进行执行处理。")])]),t._v(" "),a("p",[t._v("注意：当只用 JavaScript 过渡的时候， 在 enter 和 leave 中，"),a("strong",[t._v("回调函数 done 是必须的 。否则，它们会被同步调用，过渡会立即完成")]),t._v("。"),a("br"),t._v("\n推荐对于仅使用 JavaScript 过渡的元素添加 "),a("code",[t._v('v-bind:css="false"')]),t._v("，"),a("strong",[t._v("Vue 会跳过 CSS 的检测")]),t._v("。这也可以避免过渡过程中 CSS 的影响。")]),t._v(" "),a("p",[a("code",[t._v('<transition v-on:before-enter="beforeEnter" v-on:enter="enter" v-on:after-enter="afterEnter" v-on:enter-cancelled="enterCancelled" v-on:before-leave="beforeLeave" v-on:leave="leave" v-on:after-leave="afterLeave" v-on:leave-cancelled="leaveCancelled">…</transition>')]),a("br"),t._v(" "),a("strong",[t._v("在methods中添加以下方法")]),t._v("：beforeEnter enter afterEnter enterCancelled beforeLeave leave afterLeave leave-cancelled,它们的参数都是el,done（回调函数）")]),t._v(" "),a("h4",{attrs:{id:"初始渲染的过渡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始渲染的过渡"}},[t._v("#")]),t._v(" 初始渲染的过渡")]),t._v(" "),a("blockquote",[a("p",[t._v("可以通过 appear 特性设置节点的在初始渲染的过渡，默认和进入和离开过渡一样，同样也可以自定义 CSS 类名。")])]),t._v(" "),a("p",[a("code",[t._v('<transition appear appear-class="custom-appear-class" appear-to-class="custom-appear-to-class" (2.1.8+) appear-active-class="custom-appear-active-class"></transition>')])]),t._v(" "),a("h4",{attrs:{id:"多个元素的过渡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个元素的过渡"}},[t._v("#")]),t._v(" 多个元素的过渡:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("transition name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fade"')]),t._v(" mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"out-in"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//name为要使用的css样式名，mode为过渡模式   ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"flag"')]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"save"')]),t._v(" @click"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"flag=!flag"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("save"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("button v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"edit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("edit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("transition"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("//因为切换的是同一个类型的元素，且用到了v-if和v-else。所以都需要加上key，来区别")]),t._v(" "),a("h4",{attrs:{id:"过渡模式："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过渡模式："}},[t._v("#")]),t._v(" 过渡模式：")]),t._v(" "),a("blockquote",[a("p",[t._v("同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了 过渡模式")])]),t._v(" "),a("ul",[a("li",[t._v("in-out：新元素先过渡，最后在将旧元素过渡出去；")]),t._v(" "),a("li",[t._v("out-in：旧元素先过渡出去，在过渡新元素；")])]),t._v(" "),a("h4",{attrs:{id:"多个组件的过渡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多个组件的过渡"}},[t._v("#")]),t._v(" 多个组件的过渡")]),t._v(" "),a("blockquote",[a("p",[t._v("使用条件渲染，用key区分同一类型组件")])]),t._v(" "),a("h4",{attrs:{id:"列表过渡："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表过渡："}},[t._v("#")]),t._v(" 列表过渡：")]),t._v(" "),a("ul",[a("li",[t._v("不同于 "),a("code",[t._v("<transition>")]),t._v("，它会以一个真实元素呈现：默认为一个 "),a("code",[t._v("<span>")]),t._v("。你也可以通过 tag 特性更换为其他元素。")]),t._v(" "),a("li",[t._v("内部元素 总是需要 提供唯一的 key 属性值")])]),t._v(" "),a("h4",{attrs:{id:"列表的排序过渡："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列表的排序过渡："}},[t._v("#")]),t._v(" 列表的排序过渡：")]),t._v(" "),a("p",[t._v("需要注意的是使用 FLIP 过渡的元素不能设置为 display: inline 。作为替代方案，可以设置为 display: inline-block 或者放置于 flex 中")]),t._v(" "),a("h4",{attrs:{id:"可复用的过渡："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可复用的过渡："}},[t._v("#")]),t._v(" 可复用的过渡：")]),t._v(" "),a("p",[t._v("过渡可以通过 Vue 的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将"),a("code",[t._v("<transition>")]),t._v(" 或者 "),a("code",[t._v("<transition-group>")]),t._v(" 作为根组件，然后将任何子组件放置在其中就可以了。")]),t._v(" "),a("h4",{attrs:{id:"动态过渡："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态过渡："}},[t._v("#")]),t._v(" 动态过渡：")]),t._v(" "),a("p",[t._v("在 Vue 中即使是过渡也是数据驱动的！动态过渡最基本的例子是通过 name 特性来绑定动态值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("transition v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"transitionName"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("transition"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h4",{attrs:{id:"混合（mixin）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合（mixin）"}},[t._v("#")]),t._v(" 混合（mixin）")]),t._v(" "),a("ul",[a("li",[t._v("是一种分发Vue组件可复用功能的非常灵活的方式。混合对象可以包含任意选项属性。")]),t._v(" "),a("li",[t._v("所以组件使用混合对象的时候，所有混合对象的选项可以并入组件本身。")])]),t._v(" "),a("h4",{attrs:{id:"mixin选项合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixin选项合并"}},[t._v("#")]),t._v(" mixin选项合并")]),t._v(" "),a("blockquote",[a("p",[t._v("当组件和混合对象含有同名选项的时候，这些选项将以恰当的方式进行混合")])]),t._v(" "),a("ol",[a("li",[t._v("值为对象的选项，例如methods，components，directive，将被混合成同一个对象")]),t._v(" "),a("li",[t._v("混合对象的钩子将在组件自身钩子之前调用")])]),t._v(" "),a("h4",{attrs:{id:"vue-extend-也使用同样的策略进行合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-extend-也使用同样的策略进行合并"}},[t._v("#")]),t._v(" Vue.extend()也使用同样的策略进行合并")]),t._v(" "),a("ol",[a("li",[t._v("全局混合 也可以全局注册混合对象。注意，一旦使用全局混合对象，将会影响到所以之后创建的Vue实例。"),a("br"),t._v("\n使用恰当时，可以为自定义对象注入处理逻辑（大多数情况下，只应当应用于自定义选项，也可以作为plugin以避免产生重复应用）")]),t._v(" "),a("li",[t._v("自定义选项合并策略 将使用默认策略，即简单的覆盖已有值。若想让自定义选项以自定义逻辑合并，可以向Vue.config.optionMergeStrategies添加一个函数。")])]),t._v(" "),a("h4",{attrs:{id:"自定义指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[t._v("#")]),t._v(" 自定义指令")]),t._v(" "),a("blockquote",[a("p",[t._v("钩子函数 提供如下几个可选的钩子函数")])]),t._v(" "),a("ol",[a("li",[t._v("bind:只调用一次，指令第一次绑定到元素时调用，在这里可以进行一次性的初始化设置")]),t._v(" "),a("li",[t._v("inserted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）")]),t._v(" "),a("li",[t._v("update：所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前，指令的值可能已经更新，可能未更新，可以通过比较更新前后的值来忽略不必要的模板更新")]),t._v(" "),a("li",[t._v("componentUpdated：指令所在组件VNode及其子VNode全部更新后调用")]),t._v(" "),a("li",[t._v("unbind：只调用一次，指令与元素解绑时调用")])]),t._v(" "),a("h4",{attrs:{id:"自定义指令-钩子函数参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令-钩子函数参数"}},[t._v("#")]),t._v(" 自定义指令 钩子函数参数")]),t._v(" "),a("ul",[a("li",[t._v("el：指令所绑定的元素，可以用来直接操作DOM")]),t._v(" "),a("li",[t._v("binding： 一个对象，包含以下属性")]),t._v(" "),a("li",[t._v("name:指令名，不包含v-前缀")]),t._v(" "),a("li",[t._v("value：指令的绑定值，例如："),a("code",[t._v("v-my-directive=”1+1”")]),t._v("，绑定值为2")]),t._v(" "),a("li",[t._v("oldValue：指令绑定前一个值，仅在update和componentUpdated钩子可用")]),t._v(" "),a("li",[t._v("expression：字符串形式的指令表达式。例如"),a("code",[t._v("v-my-directive=”1+1”")]),t._v("中，表达式为”1+1”")]),t._v(" "),a("li",[t._v("arg:传给指令的参数，可选。例如"),a("code",[t._v("v-my-directive：foo")]),t._v("中，参数为foo")]),t._v(" "),a("li",[t._v("modifiers：一个包含修饰符的对象，例如："),a("code",[t._v("v-my-directive.foo.bar")]),t._v("中，修饰符对象为"),a("code",[t._v("{foo:true,bar:true}")])]),t._v(" "),a("li",[t._v("vnode: Vue编译生成的虚拟节点")]),t._v(" "),a("li",[t._v("oldvnode：上一个虚拟节点，仅在update和componentUpdated钩子中可用")])]),t._v(" "),a("blockquote",[a("p",[t._v("注意：除了el以外，其他参数都应该是只读的，切勿修改。若要在钩子之间共享数据，建议通过元素的dataset来进行。")])]),t._v(" "),a("h4",{attrs:{id:"自定义指令-对象字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令-对象字面量"}},[t._v("#")]),t._v(" 自定义指令 对象字面量")]),t._v(" "),a("blockquote",[a("p",[t._v("如果指令需要多个值，可以传入一个JavaScript对象字面量。记住，指令函数可以接受所有合法的JavaScript表达式。")])]),t._v(" "),a("h4",{attrs:{id:"渲染函数-jsx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染函数-jsx"}},[t._v("#")]),t._v(" 渲染函数 & JSX")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("基础：Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力，这就是 render 函数，它比 template 更接近编译器。")])]),t._v(" "),a("li",[a("p",[t._v("节点、树以及虚拟 DOM:"),a("br"),t._v("\n每个元素都是一个节点。每片文字也是一个节点。"),a("br"),t._v("\n甚至注释也都是节点。一个节点就是页面的一个部分。"),a("br"),t._v("\n就像家谱树一样，每个节点都可以有孩子节点"),a("br"),t._v("\n2.1. 虚拟 DOM: Vue 通过建立一个虚拟 DOM 对真实 DOM 发生的变化保持追踪。"),a("br"),t._v("\ncreateElement 返回的不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。")])]),t._v(" "),a("li",[a("p",[t._v("createElement 参数"),a("br"),t._v("\n3.1、深入 data 对象：正如在模板语法中，"),a("code",[t._v("v-bind:class")]),t._v("和 "),a("code",[t._v("v-bind:style")]),t._v(" ，会被特别对待一样，在 VNode 数据对象中，下列属性名是级别最高的字段。该对象也允许你绑定普通的 HTML 特性，就像 DOM 属性一样，比如 innerHTML (这会取代 v-html 指令)。"),a("br"),t._v("\n3.2、完整示例"),a("br"),t._v("\n3.3、约束：组件树中的所有 VNodes 必须是唯一的。"),a("br"),t._v("\n渲染了 20 个重复的段落：")])]),t._v(" "),a("li",[a("p",[t._v("使用 JavaScript 代替模板功能"),a("br"),t._v("\n4.1、v-if 和 v-for"),a("br"),t._v("\n4.2、v-model：render 函数中没有与 v-model 相应的 api - 你必须自己来实现相应的逻辑："),a("br"),t._v("\n4.3、事件 & 按键修饰符：对于 .passive、.capture 和 .once事件修饰符, Vue 提供了相应的前缀可以用于 on：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    Modifier(s)     |Prefix\n    ________________________\n    .passive        |&\n    .capture        |!\n    .once           |~\n    .capture.once   |~!\n    .once.capture   |~!\n")])])]),a("p",[t._v("4.4、插槽:"),a("br"),t._v("\n你可以从 this.$slots 获取 VNodes 列表中的静态内容："),a("br"),t._v("\n如果要用渲染函数向子组件中传递作用域插槽，可以利用 VNode 数据中的 scopedSlots 域：")])]),t._v(" "),a("li",[a("p",[t._v("JSX:"),a("br"),t._v("\n注意：将 h 作为 createElement 的别名是 Vue 生态系统中的一个通用惯例，实际上也是 JSX 所要求的，如果在作用域中 h 失去作用，在应用中会触发报错。")])]),t._v(" "),a("li",[a("p",[t._v("函数式组件（无状态无data，无实例无this上下文）"),a("br"),t._v("\n6.1、slots() 和 children 对比")])])]),t._v(" "),a("h4",{attrs:{id:"十六、插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十六、插件"}},[t._v("#")]),t._v(" 十六、插件")]),t._v(" "),a("ol",[a("li",[t._v("开发插件：  插件通常会为 Vue 添加全局功能。插件的范围没有限制——一般有下面几种："),a("br"),t._v("\n1.1 添加全局方法或者属性，如: vue-custom-element"),a("br"),t._v("\n1.2 添加全局资源：指令/过滤器/过渡等，如 vue-touch"),a("br"),t._v("\n1.3 通过全局 mixin 方法添加一些组件选项，如: vue-router"),a("br"),t._v("\n1.4添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。"),a("br"),t._v("\n1.5 一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如 vue-router")])]),t._v(" "),a("blockquote",[a("p",[t._v("Vue.js 的插件应当有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象：")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("使用插件"),a("br"),t._v("\n2.1 通过全局方法 Vue.use() 使用插件：// 调用 "),a("code",[t._v("MyPlugin.install(Vue)")]),a("br"),t._v("\n2.2 "),a("code",[t._v("Vue.use(MyPlugin)")]),a("br"),t._v("\n2.3 也可以传入一个选项对象："),a("br"),t._v("\n2.4 "),a("code",[t._v("Vue.use(MyPlugin, { someOption: true })")]),t._v("\n2.5 Vue.use 会自动阻止多次注册相同插件，届时只会注册一次该插件。")])]),t._v(" "),a("h4",{attrs:{id:"十七、过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十七、过滤器"}},[t._v("#")]),t._v(" 十七、过滤器")]),t._v(" "),a("blockquote",[a("p",[t._v("Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。")])]),t._v(" "),a("ol",[a("li",[t._v("过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：")]),t._v(" "),a("li",[t._v("可以在一个组件的选项中定义本地的过滤器：")]),t._v(" "),a("li",[t._v("全局定义过滤器：")]),t._v(" "),a("li",[t._v("过滤器可以串联：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" filterA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" filterB "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将 filterA 的结果传递到 filterB 中。  ")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("过滤器是 JavaScript 函数，因此可以接收参数：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filterA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'arg1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("这里，filterA 被定义为接收三个参数的过滤器函数。其中 message 的值作为第一个参数，普通字符串 'arg1' 作为第二个参数，表达式 arg2 的值作为第三个参数。")])]),t._v(" "),a("p",[t._v("工具")]),t._v(" "),a("h4",{attrs:{id:"十八、生产环境部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十八、生产环境部署"}},[t._v("#")]),t._v(" 十八、生产环境部署")]),t._v(" "),a("ol",[a("li",[t._v("开启生产环境模式："),a("br"),t._v("\n开发环境下，Vue 会提供很多警告来帮你对付常见的错误与陷阱。"),a("br"),t._v("\n而在生产环境下，这些警告语句却没有用，反而会增加应用的体积。"),a("br"),t._v("\n此外，有些警告检查还有一些小的运行时开销，这在生产环境模式下是可以避免的。"),a("br"),t._v("\n1.1、不使用构建工具：如果用 Vue 完整独立版本，即直接用 "),a("code",[t._v("<script>")]),t._v(" 元素引入 Vue 而不提前进行构建，请记得在生产环境下使用压缩后的版本 (vue.min.js)。"),a("br"),t._v("\n1.2、使用构建工具")]),t._v(" "),a("li",[t._v("模板预编译")]),t._v(" "),a("li",[t._v("提取组件的 CSS")]),t._v(" "),a("li",[t._v("跟踪运行时错误：如果在组件渲染时出现运行错误，错误将会被传递至全局"),a("code",[t._v("Vue.config.errorHandler")]),t._v("配置函数 (如果已设置)。利用这个钩子函数来配合错误跟踪服务是个不错的主意。")])]),t._v(" "),a("h4",{attrs:{id:"十九、单文件组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十九、单文件组件"}},[t._v("#")]),t._v(" 十九、单文件组件")]),t._v(" "),a("ol",[a("li",[t._v("介绍：在很多 Vue 项目中，我们使用 Vue.component 来定义全局组件，紧接着用 "),a("code",[t._v("new Vue({ el: '#container '})")]),t._v(" 在每个页面内指定一个容器元素。"),a("br"),t._v("\n缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("全局定义 (Global definitions) ，强制要求每个 component 中的命名不得重复")]),t._v(" "),a("li",[t._v("字符串模板 (String templates) ，缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的")]),t._v(" "),a("li",[t._v("不支持 CSS (No CSS support) ，意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏")]),t._v(" "),a("li",[t._v("没有构建步骤 (No build step) ，限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("怎么看待关注点分离？")])]),t._v(" "),a("ul",[a("li",[t._v("一个重要的事情值得注意，关注点分离不等于文件类型分离。")]),t._v(" "),a("li",[t._v("我们已经发现相比于把代码库分离成三个大的层次并将其相互交织起来，把它们划分为松散耦合的组件再将其组合起来更合理一些。")]),t._v(" "),a("li",[t._v("在一个组件里，其模板、逻辑和样式是内部耦合的，并且把他们搭配在一起实际上使得组件更加内聚且更可维护。")])]),t._v(" "),a("h4",{attrs:{id:"二十、路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二十、路由"}},[t._v("#")]),t._v(" 二十、路由")]),t._v(" "),a("ul",[a("li",[t._v("hash模式：在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取；"),a("br"),t._v("\n特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。")]),t._v(" "),a("li",[t._v("history模式：history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。")])]),t._v(" "),a("h4",{attrs:{id:"vue-router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[t._v("#")]),t._v(" Vue-router")]),t._v(" "),a("p",[t._v("active-class 是vue-router模块的router-link组件"),a("br"),t._v("\n嵌套路由：路由对象的children属性可以定义子路由数组"),a("br"),t._v("\n路由跳转")]),t._v(" "),a("ol",[a("li",[t._v("声明式（标签） "),a("code",[t._v("<router-link :to=”index”>")])]),t._v(" "),a("li",[t._v("编程式（js）"),a("code",[t._v("router.push(‘index’)")])])]),t._v(" "),a("ul",[a("li",[t._v("懒加载（按需加载路由）")])]),t._v(" "),a("ol",[a("li",[t._v("webpack提供require.ensure()来实现按需加载"),a("br"),t._v("\n2.使用 ()=> import('modulePath') 导入 (import 返回一个promise)")])]),t._v(" "),a("p",[a("strong",[t._v("$route对象")]),t._v(" 是路由信息对象，包括path，params，hash，query，fullPath，matched，name"),a("br"),t._v(" "),a("strong",[t._v("$router")]),t._v(" 是路由实例，包括路由跳转方法，钩子函数等"),a("br"),t._v(" "),a("strong",[t._v("命名路由")]),t._v(" 路由配置里写name: ’a’"),a("br"),t._v(" "),a("strong",[t._v("重定向")]),t._v(" 路由配置里写redirect:’’/b’"),a("br"),t._v(" "),a("strong",[t._v("路由钩子函数")])]),t._v(" "),a("blockquote",[a("p",[t._v("路由守卫接收三个参数")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("to")]),t._v("：Route 即将进入的目标路由对象")]),t._v(" "),a("li",[a("code",[t._v("from")]),t._v("：Route 当前导航正要离开的路由")]),t._v(" "),a("li",[a("code",[t._v("next")]),t._v(": Function 一定要调用该方法来resolve这个钩子，执行效果依赖于next方法调用参数")]),t._v(" "),a("li",[a("code",[t._v("next()")]),t._v(": 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。")]),t._v(" "),a("li",[a("code",[t._v("next(false)")]),t._v(": 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。")]),t._v(" "),a("li",[a("code",[t._v("next('/')")]),t._v(" 或者"),a("code",[t._v("next({ path: '/' })")]),t._v(": 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: 'home' 之类的选项以及任何用在 router-link 的 to prop 或 router.push 中的选项。")]),t._v(" "),a("li",[a("code",[t._v("next(error)")]),t._v(": (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError() 注册过的回调。"),a("br"),t._v(" "),a("strong",[t._v("全局导航钩子")])])]),t._v(" "),a("ol",[a("li",[a("code",[t._v("router.beforeEach(to,from,next)")]),t._v(" 当一个导航被触发时，全局前置守卫按顺序被触发")]),t._v(" "),a("li",[a("code",[t._v("router.beforeResolve(to,from,next)")]),t._v(" 导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫被调用")]),t._v(" "),a("li",[a("code",[t._v("router.afterEach(to,from)")]),t._v(" 全局后置钩子"),a("br"),t._v(" "),a("strong",[t._v("路由独享钩子")]),t._v(" "),a("code",[t._v("beforeEnter(to,from,next)")]),t._v(" "),a("strong",[t._v("定义在路由配置")]),t._v("上\n"),a("strong",[t._v("组件内导航钩子")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);